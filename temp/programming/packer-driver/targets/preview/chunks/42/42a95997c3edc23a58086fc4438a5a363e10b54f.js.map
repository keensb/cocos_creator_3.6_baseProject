{"version":3,"sources":["file:///F:/creator/project_3/NewProject_36/assets/script/com/MainEntry.ts"],"names":["_decorator","Component","find","Node","log","UIOpacity","Label","tween","ClassSon","superSetter","ccclass","property","MainEntry","type","visible","displayName","tooltip","onLoad","start","son","a","bg","getOrAddComponent","opacity","window","setPosition","position","y","console","scale","to","scaleX","hh","textObj1","test","textObj2","Object","x","inst","obj","update","deltaTime"],"mappings":"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","sourcesContent":["import { _decorator, Component, find, director, Node, log, UIOpacity, Label, tween, Vec3, BaseNode } from 'cc';\nimport { engineOverrider } from '../overwrite/engineOverride';\nimport { ClassSon } from '../utils/ClassSon';\nimport { superSetter } from '../utils/GlabolImport';\n\nimport \"../overwrite/engineOverride\";//不带 from 关键字的import,  作用是直接导进来并立即执行 相当于js的 require()\n\nconst { ccclass, property } = _decorator;\n\n\n\n@ccclass('MainEntry')\nexport class MainEntry extends Component {\n\n    @property({\n        type: Label,//对象类型\n        visible: true,//是否在面板上显示这个属性\n        displayName: \"我被改了名字\",//改对象对外显示的名称\n        tooltip: \"我的原名叫 label\"//鼠标移上去时显示的说明\n    })\n    label: Label = null;\n\n    onLoad() {\n        //engineOverrider.startWrite();//在 creator 底层的JS原型链中 新增或覆盖自定义的业务代码\n    }\n\n    start() {\n        let son = new ClassSon();\n        log(son.a)\n        superSetter(ClassSon, son, \"a\", 5);\n        log(son.a)\n        son.a = 3;\n        log(son.a);\n        \n        //find(\"Canvas/bg\").getComponent(UIOpacity).opacity = 100;\n        var bg = find(\"Canvas/bg\");\n        bg.getOrAddComponent(UIOpacity).opacity = 100;\n        window[\"bg\"] = bg;\n        bg.setPosition(100, bg.position.y);\n\n        console.log(\"scale\", bg.scale)\n        \n        tween(bg).to(5, { scaleX: 2 }).start();\n        tween(bg).to(5, { hh: 400 }).start();\n\n\n        let textObj1 = this.test<Object>(10, 20);//这里没传入第三个参数, 也就是类型 所以 Object 不起作用 返回的将是默认的 Node\n        let textObj2 = this.test<Object>(10, 20, Object);//这里没传入第三个参数, 也就是类型 所以 Object 不起作用\n\n        console.log(\"textObj1 =\", textObj1)\n        console.log(\"textObj2 =\", textObj2)\n\n\n    }\n\n    private test<T>(x: number, y: number, inst?: new () => T): T {\n\n        let obj = !!inst ? new inst : new Node();\n        obj[\"x\"] = x;\n        obj[\"y\"] = y;\n        return <T>obj;\n    }\n\n    update(deltaTime: number) {\n\n    }\n}\n\n\n\n\n"]}